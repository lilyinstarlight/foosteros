name: Installer

on:
  workflow_run:
    workflows:
      - Nix
    branches:
      - main
    types:
      - completed
  workflow_dispatch:

jobs:
  populate:
    name: Populate Build Matrix
    if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    outputs:
      hosts: ${{ steps.identify.outputs.hosts }}
    steps:
      - uses: cachix/install-nix-action@v18
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
            system-features = benchmark big-parallel kvm nixos-test

      - uses: cachix/cachix-action@v12
        with:
          name: foosteros

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - id: identify
        name: Identifying hosts capable of being built into an installer
        run: |
          hosts="$(nix -vL eval .#nixosConfigurations --apply builtins.attrNames --json | jq -r '.[]')"
          buildHosts=""

          for host in hosts; do
            if nix -vL eval .#nixosConfigurations."$host".config.system.build.installer.outPath &>/dev/null \
                && [ "$(nix -vL eval --raw .#nixosConfigurations."$host".pkgs.stdenv.hostPlatform.uname.processor)" = "$(uname -m)" ]; then
              buildHosts+="$(printf '%s\n' "$host")"
            fi
          done

          echo "hosts=$(echo "$hosts" | jq --null-input --raw-input --compact-output '[inputs | select(length>0)]')" >> $GITHUB_OUTPUT

  build:
    name: 'Build Installer: ${{ matrix.host }}'
    needs: [populate]
    runs-on: ubuntu-latest
    outputs:
      filename: ${{ steps.build.outputs.filename }}
    strategy:
      matrix:
        host: ${{ fromJSON(needs.populate.outputs.hosts) }}
    steps:
      - run: sudo mkdir /nix

      - uses: easimon/maximize-build-space@v6
        with:
          build-mount-path: '/nix'
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'

      - uses: cachix/install-nix-action@v18
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
            system-features = benchmark big-parallel kvm nixos-test

      - uses: cachix/cachix-action@v12
        with:
          name: foosteros

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - id: build
        name: Build ISO
        run: |
          nix -vL --show-trace build '.#nixosConfigurations.${{ matrix.host }}.config.system.build.installer'
          echo "filename=$(nix -vL --show-trace eval '.#nixosConfigurations.${{ matrix.host }}.config.system.build.installer.name')" >> $GITHUB_OUTPUT

      - name: Deploy ISO to website
        env:
          SFTP_HOST: ${{ secrets.SFTP_HOST }}
          SFTP_USER: ${{ secrets.SFTP_USER }}
          SFTP_KEY: ${{ secrets.REPO_KEY }}
          SFTP_PATH: ${{ secrets.SFTP_PATH }}
        run: |
          sftp_key="$(mktemp)"
          printenv SFTP_KEY >"$sftp_key"

          nix run nixpkgs#rclone -- copyto --sftp-host "$SFTP_HOST" --sftp-user "$SFTP_USER" --sftp-key-file "$sftp_key" --copy-links ./result :sftp:"$SFTP_PATH"'/${{ steps.build.outputs.filename }}'
