name: Checks

on:
  workflow_call:
    inputs:
      ref_head:
        default: ${{ github.ref }}
        required: false
        type: string
      impure:
        default: false
        required: false
        type: boolean
      nix_installer:
        default: 'https://nixos.org/nix/install'
        required: false
        type: string
      cachix_cache_name:
        default: 'foosteros'
        required: false
        type: string
    secrets:
      cachix_auth_token:
        description: 'Token for uploading artifacts to Cachix'
        required: false

jobs:
  evaluate:
    name: Evaluate Flake
    runs-on: ubuntu-latest
    steps:
      - uses: cachix/install-nix-action@v23
        with:
          install_url: ${{ inputs.nix_installer }}
          extra_nix_config: |
            system-features = benchmark big-parallel kvm nixos-test

      - uses: cachix/cachix-action@v12
        with:
          name: ${{ inputs.cachix_cache_name }}

      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref_head }}

      # TODO: fix OOMs from using `--all-systems` (maybe just detect what systems have outputs and run commands in sequence like this automatically?)
      - name: 'Pre-evaluate all derivation-type outputs'
        run: |
          outputs="$(for system in x86_64-linux aarch64-linux x86_64-darwin aarch64-darwin; do nix -vL flake show --legacy --system "$system" --json | jq --compact-output -r '. as $outputs | paths | select(.[-1] == "type") | . as $path | $outputs | getpath($path) as $type | if ($type == "derivation") then ($path[:-1] | join(".")) elif ($type == "nixos-configuration") then ($path[:-1] + ["config", "system", "build", "toplevel"] | join(".")) else empty end'; done | jq --raw-input --slurp --compact-output -r 'split("\n") | map(select(. != ""))')"
          jq --null-input --raw-input --compact-output --argjson outputs "$outputs" -r '$outputs[]' | xargs -I'{}' nix -vL eval --json '.#{}.drvPath' | jq -r

      - run: nix -vL --show-trace flake check --no-build --system x86_64-linux
      - run: nix -vL --show-trace flake check --no-build --system aarch64-linux
      - run: nix -vL --show-trace flake check --no-build --system x86_64-darwin
      - run: nix -vL --show-trace flake check --no-build --system aarch64-darwin

  populate:
    name: Populate Checks Matrix
    runs-on: ubuntu-latest
    outputs:
      checks: ${{ steps.identify.outputs.checks }}
      dependencies: ${{ steps.identify.outputs.dependencies }}
    steps:
      - uses: cachix/install-nix-action@v23
        with:
          install_url: ${{ inputs.nix_installer }}
          extra_nix_config: |
            system-features = benchmark big-parallel kvm nixos-test

      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref_head }}

      - id: identify
        name: Identify all system-compatible checks
        run: |
          checks="$(nix -vL eval ".#checks.$(nix show-config --json | jq -r .system.value)" --apply 'builtins.mapAttrs (_: drv: drv.drvPath)' --json)"
          echo "checks=$(jq --null-input --raw-input --compact-output --argjson checks "$checks" '$checks | keys')" >> $GITHUB_OUTPUT
          echo "dependencies=$(jq --null-input --raw-input --compact-output --argjson checks "$checks" -r '$checks[]' | xargs -I'{}' sh -c 'nix path-info --derivation -r '"'{}'"'"^*" | jq --raw-input --slurp '"'"'split("\n") | map(select(. != "")) as $drvs | {"path": $drvs[-1], "references": $drvs[:-1]}'"'" | jq --compact-output --argjson checks "$checks" --slurp 'map({"name": (.path as $drv | $checks | with_entries(select(.value == $drv)) | keys | first | select(. != null)), "value": (.references | map(. as $drv | $checks | with_entries(select(.value == $drv)) | keys | first | select(. != null)))}) | from_entries')" >> $GITHUB_OUTPUT

  check:
    name: 'Check: ${{ matrix.check }}'
    runs-on: ubuntu-latest
    needs: [populate]
    strategy:
      matrix:
        check: ${{ fromJSON(needs.populate.outputs.checks) }}
    outputs:
      cached: ${{ steps.query.outputs.cached }}
    steps:
      - name: Free up runner space
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL

      - uses: cachix/install-nix-action@v23
        with:
          install_url: ${{ inputs.nix_installer }}
          extra_nix_config: |
            system-features = benchmark big-parallel kvm nixos-test

      - uses: cachix/cachix-action@v12
        with:
          name: ${{ inputs.cachix_cache_name }}
          authToken: ${{ secrets.cachix_auth_token }}

      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref_head }}

      - id: query
        name: 'Check cache for checks.${{ matrix.check }}'
        env:
          IMPURE: ${{ inputs.impure }}
          CHECK: ${{ matrix.check }}
        run: |
          if ! [ "$IMPURE" = true ]; then
            narhash="$(nix -vL --show-trace eval --raw ".#checks.$(nix show-config --json | jq -r .system.value).$CHECK" --apply 'builtins.substring 11 32')"
          else
            narhash="$(nix-instantiate -v --show-trace --eval --expr '{ attr }: (import ./test.nix {}).${attr}.outPath' --argstr attr "$CHECK" --json | jq -r '.[11:43]')"
          fi
          for cache in '${{ inputs.cachix_cache_name }}'.cachix.org cache.nixos.org; do
            if curl -sfo /dev/null "https://$cache/$narhash.narinfo"; then
              echo "Found $narhash in $cache"
              echo 'cached=true' >> $GITHUB_OUTPUT
            fi
          done

      - name: 'Waiting for dependencies to be built'
        if: steps.query.outputs.cached != 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEPENDENCIES: ${{ needs.populate.outputs.dependencies }}
        run: |
          for job in $(jq --null-input --raw-input --compact-output --argjson dependencies "$DEPENDENCIES" -r '$dependencies."${{ matrix.check }}"[]'); do
            while (echo -n 'Authorization: Bearer ' && printenv GITHUB_TOKEN) | curl -H @/dev/stdin -sf '${{ github.api_url }}/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs' | jq --arg job "$job" -e '(.jobs[] | select(.name | endswith("Check: " + $job))).status != "completed"' >/dev/null; do
              echo "Waiting on checks.$job..."
              sleep 10
            done
          done

      - name: 'Build checks.${{ matrix.check }}'
        if: steps.query.outputs.cached != 'true'
        env:
          IMPURE: ${{ inputs.impure }}
          CHECK: ${{ matrix.check }}
        run: |
          if ! [ "$IMPURE" = true ]; then
            nix -vL --show-trace build ".#checks.$(nix show-config --json | jq -r .system.value).$CHECK"
          else
            nix-build -v --show-trace test.nix -A "$CHECK"
          fi
