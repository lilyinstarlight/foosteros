name: Checks

on:
  workflow_call:
    inputs:
      REF_HEAD:
        required: true
        type: string

jobs:
  evaluate:
    name: Evaluate Flake
    runs-on: ubuntu-latest
    steps:
      - uses: cachix/install-nix-action@v20
        with:
          extra_nix_config: |
            system-features = benchmark big-parallel kvm nixos-test

      - uses: actions/checkout@v3
        with:
          ref: '${{ inputs.REF_HEAD }}'

      # TODO: remove whenever Nix (or crane) fixes this
      - name: 'TODO: Nix pls'
        run: |
          nix -vL build --no-link .#nixosConfigurations.bina.config.system.build.installBootLoader

      - run: nix -vL --show-trace flake check --no-build

  populate:
    name: Populate Checks Matrix
    runs-on: ubuntu-latest
    outputs:
      checks: ${{ steps.identify.outputs.checks }}
      cached: ${{ steps.query.outputs.cached }}
    steps:
      - uses: cachix/install-nix-action@v20
        with:
          extra_nix_config: |
            system-features = benchmark big-parallel kvm nixos-test

      - uses: actions/checkout@v3
        with:
          ref: '${{ inputs.REF_HEAD }}'

      - id: identify
        name: Identify all system-compatible checks
        run: |
          echo "checks=$(nix -vL eval ".#checks.$(nix show-config --json | jq -r .system.value)" --apply builtins.attrNames --json)" >> $GITHUB_OUTPUT

  check:
    name: 'Check: ${{ matrix.check }}'
    runs-on: ubuntu-latest
    needs: [populate]
    strategy:
      matrix:
        check: ${{ fromJSON(needs.populate.outputs.checks) }}
    steps:
      - name: Free up runner space
        run: sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc

      - uses: cachix/install-nix-action@v20
        with:
          extra_nix_config: |
            system-features = benchmark big-parallel kvm nixos-test

      - uses: cachix/cachix-action@v12
        with:
          name: foosteros
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - uses: actions/checkout@v3
        with:
          ref: '${{ inputs.REF_HEAD }}'

      - id: query
        name: 'Check cache for checks.${{ matrix.check }}'
        env:
          CHECK: ${{ matrix.check }}
        run: |
          narhash="$(nix -vL --show-trace eval --raw ".#checks.$(nix show-config --json | jq -r .system.value).$CHECK" --apply 'builtins.substring 11 32')"
          if curl -sfo /dev/null "https://foosteros.cachix.org/$narhash.narinfo"; then
            echo 'Found $narhash in cache'
            echo 'cached=true' >> $GITHUB_OUTPUT
          fi

      - id: build
        name: 'Build checks.${{ matrix.check }}'
        if: steps.query.outputs.cached != 'true'
        env:
          CHECK: ${{ matrix.check }}
        run: |
          nix -vL --show-trace build ".#checks.$(nix show-config --json | jq -r .system.value).$CHECK"
