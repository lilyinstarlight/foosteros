commit 989e69e4cca4487de18d43f3549756d4f72ae04e
Author: Lily Foster <lily@lily.flowers>
Date:   Tue Feb 22 17:50:35 2022 -0500

    Build - use system RtMidi when USE_SYSTEM_LIBS is turned on

diff --git a/app/external/CMakeLists.txt b/app/external/CMakeLists.txt
index 3652a699d..44767a791 100644
--- a/app/external/CMakeLists.txt
+++ b/app/external/CMakeLists.txt
@@ -21,6 +21,7 @@ ExternalProject_Add(sp_midi
     CMAKE_ARGS
         -DERLANG_INCLUDE_PATH=${ERLANG_INCLUDE_PATH}
         -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}
+        -DUSE_SYSTEM_RTMIDI=${USE_SYSTEM_LIBS}
     BUILD_COMMAND ${CMAKE_COMMAND} --build . --config Release
     )
 
diff --git a/app/external/linux_build_externals.sh b/app/external/linux_build_externals.sh
index 0916ec485..ef13a808e 100755
--- a/app/external/linux_build_externals.sh
+++ b/app/external/linux_build_externals.sh
@@ -8,7 +8,7 @@ cd "${SCRIPT_DIR}/build"
 
 ERLANG_INCLUDE_PATH=`erl -noinput -eval 'io:format("~s~n", [filename:join([lists:concat([code:root_dir(), "/erts-", erlang:system_info(version)]), "include"])]), init:stop(0).'`
 
-cmake -DERLANG_INCLUDE_PATH=${ERLANG_INCLUDE_PATH} -G "Unix Makefiles" ..
+cmake -DUSE_SYSTEM_LIBS="${USE_SYSTEM_LIBS}" -DERLANG_INCLUDE_PATH="${ERLANG_INCLUDE_PATH}" -G "Unix Makefiles" ..
 
 echo "Building external deps..."
 cmake --build . --config Release
diff --git a/app/linux-prebuild.sh b/app/linux-prebuild.sh
index 6fac0c952..cec49767f 100755
--- a/app/linux-prebuild.sh
+++ b/app/linux-prebuild.sh
@@ -32,7 +32,7 @@ fi
 
 # Build external dependencies and copy to build tree
 echo "Building external binary dependencies..."
-"${SCRIPT_DIR}"/external/linux_build_externals.sh
+USE_SYSTEM_LIBS="$([ "$system_libs" == true ] && echo ON || echo OFF)" "${SCRIPT_DIR}"/external/linux_build_externals.sh
 
 echo "Compiling native ruby extensions..."
 ruby "${SCRIPT_DIR}"/server/ruby/bin/compile-extensions.rb

commit a48038a048762a5f3ff935b0e0abe993f5a55965
Author: Lily Foster <lily@lily.flowers>
Date:   Tue Feb 22 17:47:59 2022 -0500

    Build - add initial linux-release.sh script
    
    The script primarily creates a cleaned up dist directory of everything required at runtime

diff --git a/app/linux-release.sh b/app/linux-release.sh
new file mode 100755
index 000000000..04b6a5088
--- /dev/null
+++ b/app/linux-release.sh
@@ -0,0 +1,68 @@
+#!/bin/bash -e
+shopt -s dotglob
+
+SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
+
+cd "${SCRIPT_DIR}"
+
+# Make dist directory
+rm -rf build/linux_dist
+mkdir -p build/linux_dist
+
+# Copy distributable files
+cp -r ../{bin,etc} build/linux_dist/
+
+# Copy example configs
+mkdir -p build/linux_dist/app
+cp -r config build/linux_dist/app/
+
+# Copy server natives
+mkdir -p build/linux_dist/app/server
+cp -r server/native build/linux_dist/app/server/
+
+# Copy Spider (Ruby) server
+mkdir -p build/linux_dist/app/server
+cp -r server/ruby build/linux_dist/app/server/
+
+# Copy built Tau (BEAM) server
+mkdir -p build/linux_dist/app/server/beam/tau/_build/prod
+cp -r server/beam/tau/_build/prod/rel build/linux_dist/app/server/beam/tau/_build/prod/
+cp server/beam/tau/boot-lin.sh build/linux_dist/app/server/beam/tau/
+
+# Copy only necessary files for the Qt GUI
+mkdir -p build/linux_dist/app/gui/qt
+cp -r gui/qt/theme build/linux_dist/app/gui/qt/
+
+# Copy Qt GUI binary
+mkdir -p build/linux_dist/app/build/gui/qt
+cp build/gui/qt/sonic-pi build/linux_dist/app/build/gui/qt/sonic-pi
+
+# If ImGui was built
+if [ -x build/gui/imgui/sonic-pi-imgui ]; then
+  # Copy ImGui files
+  mkdir -p build/linux_dist/app/gui/imgui/res
+  cp -r gui/imgui/res/Cousine-Regular.ttf build/linux_dist/app/gui/imgui/res/
+
+  # Copy ImGui binary
+  mkdir -p build/linux_dist/app/build/gui/imgui
+  cp build/gui/imgui/sonic-pi-imgui build/linux_dist/app/build/gui/imgui/sonic-pi-imgui
+fi
+
+# Remove non-essential files from vendored Ruby gems
+for file in build/linux_dist/app/server/ruby/vendor/*/*; do
+  if [ "$(basename "$file")" != "lib" ]; then
+    rm -rf "$file"
+  fi
+done
+
+# Remove unnecessary Erlang artifacts
+rm build/linux_dist/app/server/beam/tau/_build/prod/rel/tau/bin/tau.bat
+
+# Strip Erlang BEAMs
+erl -noinput -eval \
+  'lists:foreach(fun(F) -> beam_lib:strip(F) end, filelib:wildcard("build/linux_dist/app/server/beam/tau/**/*.beam"))' \
+  -s init stop
+
+echo
+echo "app/build/linux_dist is now ready for packaging"
+echo

commit 86894a81cd95411867963c47728ed77dbf543591
Author: Lily Foster <lily@lily.flowers>
Date:   Fri May 6 18:17:04 2022 -0400

    Build - make mac/pi script arg handling and usage consistent

diff --git a/app/mac-clean.sh b/app/mac-clean.sh
index 068c95a46..72b4750cb 100755
--- a/app/mac-clean.sh
+++ b/app/mac-clean.sh
@@ -6,12 +6,12 @@ WORKING_DIR="$(pwd)"
 cd "${SCRIPT_DIR}"
 
 echo "echo Cleaning out native dir...."
-rm -rf "${SCRIPT_DIR}/server/native/supercollider"
-rm -rf "${SCRIPT_DIR}/server/native/erlang"
-rm -rf "${SCRIPT_DIR}/server/native/scsynth"
+rm -rf "${SCRIPT_DIR}"/server/native/supercollider
+rm -rf "${SCRIPT_DIR}"/server/native/erlang
+rm -rf "${SCRIPT_DIR}"/server/native/scsynth
 
 # Use generic linux clean script for everything else
-"${SCRIPT_DIR}/linux-clean.sh"
+"${SCRIPT_DIR}"/linux-clean.sh "$@"
 
 # Restore working directory as it was prior to this script running...
 cd "${WORKING_DIR}"
diff --git a/app/mac-config.sh b/app/mac-config.sh
index e61deedd1..86f76dcca 100755
--- a/app/mac-config.sh
+++ b/app/mac-config.sh
@@ -3,31 +3,53 @@ set -e # Quit script on error
 SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
 WORKING_DIR="$(pwd)"
 
+args=("$@")
 config=""
+no_imgui=false
 
-if [ "$1" = "--config" ]; then
-  case $2 in
-    Release|Debug|RelWithDebInfo|MinSizeRel)
-      config="$2"
-      ;;
-    *)
-      echo "`basename $0`: Error: invalid configuration: '${2}'" 1>&2
-      echo "Valid configurations: Release, Debug, RelWithDebInfo, MinSizeRel" 1>&2
-      exit 1
-      ;;
-  esac
-elif [ ! -z $1 ]; then
-  echo "`basename $0`: Error: invalid parameter: '${1}'" 1>&2
-  echo "Usage: `basename $0` [--config <Release|Debug|RelWithDebInfo|MinSizeRel>]" 1>&2
-  exit 1
-fi
+# extract options and their arguments into variables.
+while [ -n "$1" ]; do
+    case "$1" in
+        -c|--config)
+            case $2 in
+                Release|Debug|RelWithDebInfo|MinSizeRel)
+                    config="$2"
+                    ;;
+                *)
+                    echo "`basename $0`: Error: invalid configuration: '${2}'" 1>&2
+                    echo "Valid configurations: Release, Debug, RelWithDebInfo, MinSizeRel" 1>&2
+                    exit 1
+                    ;;
+            esac
+            shift 2
+            ;;
+        -n|--no-imgui)
+            no_imgui=true
+            shift
+            ;;
+        -s|--system-libs|-o|--offline-build)
+            shift
+            ;;
+        --) shift ; break ;;
+        *) echo "Invalid argument: $1" ; exit 1 ;;
+    esac
+done
 
 echo "Creating build directory..."
 mkdir -p "${SCRIPT_DIR}/build"
 
 echo "Generating makefiles..."
 cd "${SCRIPT_DIR}/build"
-cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=\"$config\" ..
+
+option() {
+  if [ "$1" == "true" ] || [ "$1" == "!" ] || [ "$1" == "!false" ]; then
+    echo ON
+  else
+    echo OFF
+  fi
+}
+
+cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE="$config" -DBUILD_IMGUI_INTERFACE="$(option "!$no_imgui")" ..
 
 
 # Restore working directory as it was prior to this script running...
diff --git a/app/mac-pre-tau-prod-release.sh b/app/mac-pre-tau-prod-release.sh
index 3fee16053..fc3d07ef3 100755
--- a/app/mac-pre-tau-prod-release.sh
+++ b/app/mac-pre-tau-prod-release.sh
@@ -4,7 +4,7 @@ SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
 WORKING_DIR="$(pwd)"
 
 # Use generic linux clean script
-"${SCRIPT_DIR}"/linux-pre-tau-prod-release.sh $@
+"${SCRIPT_DIR}"/linux-pre-tau-prod-release.sh "$@"
 
 # Restore working directory as it was prior to this script running...
 cd "${WORKING_DIR}"
diff --git a/app/mac-pre-vcpkg.sh b/app/mac-pre-vcpkg.sh
index 399542f64..df1bf02ac 100755
--- a/app/mac-pre-vcpkg.sh
+++ b/app/mac-pre-vcpkg.sh
@@ -1,17 +1,25 @@
 #!/bin/bash
 set -e # Quit script on error
 
-while getopts ":n" opt; do
-  case $opt in
-    n)
-      no_imgui=true
-      echo "Running prebuild script without support for IMGUI-based GUI"
-      ;;
-    \?)
-      echo "Invalid option: -$OPTARG" >&2
-      exit 1
-      ;;
-  esac
+args=("$@")
+no_imgui=false
+
+# extract options and their arguments into variables.
+while [ -n "$1" ]; do
+    case "$1" in
+        -c|--config)
+            shift 2
+            ;;
+        -n|--no-imgui)
+            no_imgui=true
+            shift
+            ;;
+        -s|--system-libs|-o|--offline-build)
+            shift
+            ;;
+        --) shift ; break ;;
+        *) echo "Invalid argument: $1" ; exit 1 ;;
+    esac
 done
 
 SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
@@ -35,8 +43,7 @@ fi
 cd vcpkg
 triplet=(x64-osx)
 
-if [ "$no_imgui" == true ]
-then
+if [ "$no_imgui" == true ]; then
     ./vcpkg install kissfft crossguid platform-folders reproc catch2 --triplet ${triplet[0]} --recurse
 else
     ./vcpkg install kissfft fmt sdl2 gl3w reproc gsl-lite concurrentqueue platform-folders catch2 --triplet ${triplet[0]} --recurse
diff --git a/app/mac-prebuild.sh b/app/mac-prebuild.sh
index 08b9f6e11..46e4c2019 100755
--- a/app/mac-prebuild.sh
+++ b/app/mac-prebuild.sh
@@ -1,19 +1,6 @@
 #!/bin/bash
 set -e # Quit script on error
 
-while getopts ":n" opt; do
-  case $opt in
-    n)
-      no_imgui=true
-      echo "Running prebuild script without support for IMGUI-based GUI"
-      ;;
-    \?)
-      echo "Invalid option: -$OPTARG" >&2
-      exit 1
-      ;;
-  esac
-done
-
 SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
 WORKING_DIR="$(pwd)"
 
@@ -30,12 +17,7 @@ fi
 
 cd "${SCRIPT_DIR}"
 
-if [ "$no_imgui" == true ]
-then
-  "${SCRIPT_DIR}"/mac-pre-vcpkg.sh -n
-else
-  "${SCRIPT_DIR}"/mac-pre-vcpkg.sh
-fi
+"${SCRIPT_DIR}"/mac-pre-vcpkg.sh "$@"
 
 "${SCRIPT_DIR}"/external/mac_build_externals.sh
 
diff --git a/app/pi-build-gui.sh b/app/pi-build-gui.sh
index f6242c0f0..f8a354d36 100755
--- a/app/pi-build-gui.sh
+++ b/app/pi-build-gui.sh
@@ -3,7 +3,7 @@ set -e # Quit script on error
 SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
 WORKING_DIR="$(pwd)"
 
-"${SCRIPT_DIR}"/linux-build-gui.sh
+"${SCRIPT_DIR}"/linux-build-gui.sh "$@"
 
 # Restore working directory as it was prior to this script running...
 cd "${WORKING_DIR}"
diff --git a/app/pi-clean.sh b/app/pi-clean.sh
index 64df1c43e..a2cde6937 100755
--- a/app/pi-clean.sh
+++ b/app/pi-clean.sh
@@ -4,7 +4,7 @@ SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
 WORKING_DIR="$(pwd)"
 
 # Use generic linux clean script
-"${SCRIPT_DIR}"/linux-clean.sh $@
+"${SCRIPT_DIR}"/linux-clean.sh "$@"
 
 # Restore working directory as it was prior to this script running...
 cd "${WORKING_DIR}"
diff --git a/app/pi-config.sh b/app/pi-config.sh
index 8c9e808c2..3bdad0c4f 100755
--- a/app/pi-config.sh
+++ b/app/pi-config.sh
@@ -2,16 +2,14 @@
 set -e # Quit script on error
 SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
 WORKING_DIR="$(pwd)"
+
+args=("$@")
 config=""
 no_imgui=false
-
-# read the options
-
-TEMP=`getopt -o c:n --long config:,no-imgui -- "$@"`
-eval set -- "$TEMP"
+system_libs=false
 
 # extract options and their arguments into variables.
-while true ; do
+while [ -n "$1" ]; do
     case "$1" in
         -c|--config)
             case $2 in
@@ -30,8 +28,12 @@ while true ; do
             no_imgui=true
             shift
             ;;
+        -s|--system-libs|-o|--offline-build)
+            system_libs=true
+            shift
+            ;;
         --) shift ; break ;;
-        *) echo "Internal error!" ; exit 1 ;;
+        *) echo "Invalid argument: $1" ; exit 1 ;;
     esac
 done
 
@@ -41,12 +43,15 @@ mkdir -p "${SCRIPT_DIR}/build"
 echo "Generating makefiles..."
 cd "${SCRIPT_DIR}/build"
 
-if [ "$no_imgui" == true ]
-then
-    cmake -G "Unix Makefiles" -DBUILD_IMGUI_INTERFACE=OFF -DRASPBERRY_PI=1 -DCMAKE_BUILD_TYPE="$config" ..
-else
-    cmake -G "Unix Makefiles" -DBUILD_IMGUI_INTERFACE=ON -DRASPBERRY_PI=1 -DCMAKE_BUILD_TYPE="$config" ..
-fi
+option() {
+  if [ "$1" == "true" ] || [ "$1" == "!" ] || [ "$1" == "!false" ]; then
+    echo ON
+  else
+    echo OFF
+  fi
+}
+
+cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE="$config" -DBUILD_IMGUI_INTERFACE="$(option "!$no_imgui")" -DUSE_SYSTEM_LIBS="$(option "$system_libs")" ..
 
 # Restore working directory as it was prior to this script running...
 cd "${WORKING_DIR}"
diff --git a/app/pi-install-elixir.sh b/app/pi-install-elixir.sh
index c59dbdc2d..864c10b66 100755
--- a/app/pi-install-elixir.sh
+++ b/app/pi-install-elixir.sh
@@ -1,7 +1,6 @@
 #!/bin/bash
 
 if [ ! -d ~/.asdf ]; then
-
   echo "Installing asdf"
 
   git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.8.1
@@ -10,7 +9,7 @@ if [ ! -d ~/.asdf ]; then
   echo ". $HOME/.asdf/completions/asdf.bash" >> ~/.bashrc
 fi
 
-source ~/.asdf/asdf.sh 
+source ~/.asdf/asdf.sh
 asdf update
 asdf plugin-update --all
 
diff --git a/app/pi-pre-tau-prod-release.sh b/app/pi-pre-tau-prod-release.sh
index 3fee16053..fc3d07ef3 100755
--- a/app/pi-pre-tau-prod-release.sh
+++ b/app/pi-pre-tau-prod-release.sh
@@ -4,7 +4,7 @@ SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
 WORKING_DIR="$(pwd)"
 
 # Use generic linux clean script
-"${SCRIPT_DIR}"/linux-pre-tau-prod-release.sh $@
+"${SCRIPT_DIR}"/linux-pre-tau-prod-release.sh "$@"
 
 # Restore working directory as it was prior to this script running...
 cd "${WORKING_DIR}"
diff --git a/app/pi-pre-translations.sh b/app/pi-pre-translations.sh
index 64c6c2ff3..e185375a2 100755
--- a/app/pi-pre-translations.sh
+++ b/app/pi-pre-translations.sh
@@ -4,7 +4,7 @@ SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
 WORKING_DIR="$(pwd)"
 
 # Use generic linux pre translations script
-"${SCRIPT_DIR}"/linux-pre-translations.sh $@
+"${SCRIPT_DIR}"/linux-pre-translations.sh "$@"
 
 # Restore working directory as it was prior to this script running...
 cd "${WORKING_DIR}"
diff --git a/app/pi-pre-vcpkg.sh b/app/pi-pre-vcpkg.sh
index a0f907eff..3b6af5ff4 100755
--- a/app/pi-pre-vcpkg.sh
+++ b/app/pi-pre-vcpkg.sh
@@ -3,4 +3,4 @@
 SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
 
 # Use generic linux pre vcpkg script
-"${SCRIPT_DIR}"/linux-pre-vcpkg.sh $@
+"${SCRIPT_DIR}"/linux-pre-vcpkg.sh "$@"
diff --git a/app/pi-prebuild.sh b/app/pi-prebuild.sh
index 169e4fdb5..068d11d03 100755
--- a/app/pi-prebuild.sh
+++ b/app/pi-prebuild.sh
@@ -3,7 +3,7 @@
 SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
 WORKING_DIR="$(pwd)"
 
-VCPKG_FORCE_SYSTEM_BINARIES=1 "${SCRIPT_DIR}"/linux-prebuild.sh $@
+VCPKG_FORCE_SYSTEM_BINARIES=1 "${SCRIPT_DIR}"/linux-prebuild.sh "$@"
 
 # Restore working directory as it was prior to this script running...
 cd "${WORKING_DIR}"

commit de8014a54a6efa0250ec09a50e861c93f698ff8e
Author: Lily Foster <lily@lily.flowers>
Date:   Fri May 6 18:16:37 2022 -0400

    Build - overhaul linux build scripts to allow offline or vcpkg-less builds

diff --git a/app/linux-build-all.sh b/app/linux-build-all.sh
index 5672c27a6..2d4616f18 100755
--- a/app/linux-build-all.sh
+++ b/app/linux-build-all.sh
@@ -4,9 +4,9 @@ set -e # Quit script on error
 SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
 WORKING_DIR="$(pwd)"
 
-"${SCRIPT_DIR}"/linux-prebuild.sh
-"${SCRIPT_DIR}"/linux-config.sh
-"${SCRIPT_DIR}"/linux-build-gui.sh
+"${SCRIPT_DIR}"/linux-prebuild.sh "$@"
+"${SCRIPT_DIR}"/linux-config.sh "$@"
+"${SCRIPT_DIR}"/linux-build-gui.sh "$@"
 
 # Restore working directory as it was prior to this script running...
 cd "${WORKING_DIR}"
diff --git a/app/linux-config.sh b/app/linux-config.sh
index d4d1713e8..cac0d43b6 100755
--- a/app/linux-config.sh
+++ b/app/linux-config.sh
@@ -3,37 +3,39 @@ set -e # Quit script on error
 SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
 WORKING_DIR="$(pwd)"
 
-while getopts ":n" opt; do
-  case $opt in
-    n)
-      no_imgui=true
-      echo "Running config script without support for IMGUI-based GUI"
-      ;;
-    \?)
-      echo "Invalid option: -$OPTARG" >&2
-      exit 1
-      ;;
-  esac
-done
-
+args=("$@")
 config=""
-
-if [ "$1" = "--config" ]; then
-  case $2 in
-    Release|Debug|RelWithDebInfo|MinSizeRel)
-      config="$2"
-      ;;
-    *)
-      echo "`basename $0`: Error: invalid configuration: '${2}'" 1>&2
-      echo "Valid configurations: Release, Debug, RelWithDebInfo, MinSizeRel" 1>&2
-      exit 1
-      ;;
-  esac
-elif [ ! -z $1 ]; then
-  echo "`basename $0`: Error: invalid parameter: '${1}'" 1>&2
-  echo "Usage: `basename $0` [--config <Release|Debug|RelWithDebInfo|MinSizeRel>]" 1>&2
-  exit 1
-fi
+no_imgui=false
+system_libs=false
+
+# extract options and their arguments into variables.
+while [ -n "$1" ]; do
+    case "$1" in
+        -c|--config)
+            case $2 in
+                Release|Debug|RelWithDebInfo|MinSizeRel)
+                    config="$2"
+                    ;;
+                *)
+                    echo "`basename $0`: Error: invalid configuration: '${2}'" 1>&2
+                    echo "Valid configurations: Release, Debug, RelWithDebInfo, MinSizeRel" 1>&2
+                    exit 1
+                    ;;
+            esac
+            shift 2
+            ;;
+        -n|--no-imgui)
+            no_imgui=true
+            shift
+            ;;
+        -s|--system-libs|-o|--offline-build)
+            system_libs=true
+            shift
+            ;;
+        --) shift ; break ;;
+        *) echo "Invalid argument: $1" ; exit 1 ;;
+    esac
+done
 
 echo "Creating build directory..."
 mkdir -p "${SCRIPT_DIR}/build"
@@ -41,12 +43,15 @@ mkdir -p "${SCRIPT_DIR}/build"
 echo "Generating makefiles..."
 cd "${SCRIPT_DIR}/build"
 
-if [ "$no_imgui" == true ]
-then
-    cmake -G "Unix Makefiles" -DBUILD_IMGUI_INTERFACE=OFF -DCMAKE_BUILD_TYPE="$config" ..
-else
-    cmake -G "Unix Makefiles" -DBUILD_IMGUI_INTERFACE=ON -DCMAKE_BUILD_TYPE="$config" ..
-fi
+option() {
+  if [ "$1" == "true" ] || [ "$1" == "!" ] || [ "$1" == "!false" ]; then
+    echo ON
+  else
+    echo OFF
+  fi
+}
+
+cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE="$config" -DBUILD_IMGUI_INTERFACE="$(option "!$no_imgui")" -DUSE_SYSTEM_LIBS="$(option "$system_libs")" ..
 
 cd "${SCRIPT_DIR}"
 
diff --git a/app/linux-pre-tau-prod-release.sh b/app/linux-pre-tau-prod-release.sh
index 0c85a01f8..750cc4e60 100755
--- a/app/linux-pre-tau-prod-release.sh
+++ b/app/linux-pre-tau-prod-release.sh
@@ -3,16 +3,45 @@ set -e # Quit script on error
 SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
 WORKING_DIR="$(pwd)"
 
+args=("$@")
+offline_build=false
+
+# extract options and their arguments into variables.
+while [ -n "$1" ]; do
+    case "$1" in
+        -c|--config)
+            shift 2
+            ;;
+        -n|--no-imgui)
+            shift
+            ;;
+        -s|--system-libs)
+            shift
+            ;;
+        -o|--offline-build)
+            offline_build=true
+            shift
+            ;;
+        --) shift ; break ;;
+        *) echo "Invalid argument: $1" ; exit 1 ;;
+    esac
+done
+
 echo "Compiling Erlang/Elixir files..."
 cd "${SCRIPT_DIR}"/server/beam/tau
 
-MIX_ENV=prod mix local.hex --force
-MIX_ENV=prod mix local.rebar --force
-MIX_ENV=prod mix deps.get
-MIX_ENV=prod mix assets.deploy.prod
-MIX_ENV=prod mix tailwind.install
-MIX_ENV=prod mix esbuild.install
-MIX_ENV=prod mix release --overwrite
+if [ "$offline_build" == true ]; then
+    MIX_ENV=prod mix assets.deploy.prod
+    MIX_ENV=prod mix release --overwrite --no-deps-check
+else
+    MIX_ENV=prod mix local.hex --force
+    MIX_ENV=prod mix local.rebar --force
+    MIX_ENV=prod mix deps.get
+    MIX_ENV=prod mix assets.deploy.prod
+    MIX_ENV=prod mix tailwind.install
+    MIX_ENV=prod mix esbuild.install
+    MIX_ENV=prod mix release --overwrite
+fi
 
 cp src/tau.app.src ebin/tau.app
 
diff --git a/app/linux-pre-vcpkg.sh b/app/linux-pre-vcpkg.sh
index 84091f415..a75e875ae 100755
--- a/app/linux-pre-vcpkg.sh
+++ b/app/linux-pre-vcpkg.sh
@@ -1,17 +1,25 @@
 #!/bin/bash
 set -e # Quit script on error
 
-while getopts ":n" opt; do
-  case $opt in
-    n)
-      no_imgui=true
-      echo "Running prebuild script without support for IMGUI-based GUI"
-      ;;
-    \?)
-      echo "Invalid option: -$OPTARG" >&2
-      exit 1
-      ;;
-  esac
+args=("$@")
+no_imgui=false
+
+# extract options and their arguments into variables.
+while [ -n "$1" ]; do
+    case "$1" in
+        -c|--config)
+            shift 2
+            ;;
+        -n|--no-imgui)
+            no_imgui=true
+            shift
+            ;;
+        -s|--system-libs|-o|--offline-build)
+            shift
+            ;;
+        --) shift ; break ;;
+        *) echo "Invalid argument: $1" ; exit 1 ;;
+    esac
 done
 
 SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
@@ -34,8 +42,7 @@ fi
 
 cd vcpkg
 
-if [ "$no_imgui" == true ]
-then
+if [ "$no_imgui" == true ]; then
     ./vcpkg install kissfft crossguid platform-folders reproc catch2 --recurse
 else
     ./vcpkg install kissfft fmt crossguid sdl2[x11] gl3w reproc gsl-lite concurrentqueue platform-folders catch2 --recurse
diff --git a/app/linux-prebuild.sh b/app/linux-prebuild.sh
index 0e1eaace2..6fac0c952 100755
--- a/app/linux-prebuild.sh
+++ b/app/linux-prebuild.sh
@@ -1,31 +1,33 @@
 #!/bin/bash
-
 set -e # Quit script on error
 SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
 WORKING_DIR="$(pwd)"
 
-cd "${SCRIPT_DIR}"
-
-while getopts ":n" opt; do
-  case $opt in
-    n)
-      no_imgui=true
-      echo "Running prebuild script without support for IMGUI-based GUI"
-      ;;
-    \?)
-      echo "Invalid option: -$OPTARG" >&2
-      exit 1
-      ;;
-  esac
+args=("$@")
+system_libs=false
+
+# extract options and their arguments into variables.
+while [ -n "$1" ]; do
+    case "$1" in
+        -c|--config)
+            shift 2
+            ;;
+        -n|--no-imgui)
+            shift
+            ;;
+        -s|--system-libs|-o|--offline-build)
+            system_libs=true
+            shift
+            ;;
+        --) shift ; break ;;
+        *) echo "Invalid argument: $1" ; exit 1 ;;
+    esac
 done
 
 cd "${SCRIPT_DIR}"
 
-if [ "$no_imgui" == true ]
-then
-  "${SCRIPT_DIR}"/linux-pre-vcpkg.sh -n
-else
-  "${SCRIPT_DIR}"/linux-pre-vcpkg.sh
+if [ ! "$system_libs" == true ]; then
+  "${SCRIPT_DIR}"/linux-pre-vcpkg.sh "${args[@]}"
 fi
 
 # Build external dependencies and copy to build tree
@@ -35,9 +37,9 @@ echo "Building external binary dependencies..."
 echo "Compiling native ruby extensions..."
 ruby "${SCRIPT_DIR}"/server/ruby/bin/compile-extensions.rb
 
-"${SCRIPT_DIR}"/linux-pre-translations.sh
-"${SCRIPT_DIR}"/linux-pre-copy-binaries.sh
-"${SCRIPT_DIR}"/linux-pre-tau-prod-release.sh
+"${SCRIPT_DIR}"/linux-pre-translations.sh "${args[@]}"
+"${SCRIPT_DIR}"/linux-pre-copy-binaries.sh "${args[@]}"
+"${SCRIPT_DIR}"/linux-pre-tau-prod-release.sh "${args[@]}"
 
 # Restore working directory as it was prior to this script running...
 cd "${WORKING_DIR}"

commit ce5dca789361f5fbb1c137b9aaa3b1e633e6824d
Author: Lily Foster <lily@lily.flowers>
Date:   Tue Feb 22 13:49:38 2022 -0500

    Tau - allow using MIX_DEPS_PATH, MIX_ESBUILD_PATH, and MIX_TAILWINDCSS_PATH for pre-downloaded dependencies
    
    This is designed to aid in packaging for Linux distros.

diff --git a/app/server/beam/tau/config/config.exs b/app/server/beam/tau/config/config.exs
index e05427b9d..c3a8ab0d7 100644
--- a/app/server/beam/tau/config/config.exs
+++ b/app/server/beam/tau/config/config.exs
@@ -25,9 +25,9 @@ config :esbuild,
     args:
       ~w(js/app.js --bundle --target=es2017 --outdir=../priv/static/assets --external:/fonts/* --external:/images/*),
     cd: Path.expand("../assets", __DIR__),
-    env: %{"NODE_PATH" => Path.expand("../deps", __DIR__)}
-
-]
+    env: %{"NODE_PATH" => System.get_env("MIX_DEPS_PATH") || Path.expand("../deps", __DIR__)}
+  ],
+  path: System.get_env("MIX_ESBUILD_PATH")
 
 # Configures Elixir's Logger
 config :logger, :console,
@@ -48,7 +48,8 @@ config :tailwind,
       --output=../priv/static/assets/app.css
     ),
     cd: Path.expand("../assets", __DIR__)
-  ]
+  ],
+  path: System.get_env("MIX_TAILWINDCSS_PATH")
 
 # Import environment specific config. This must remain at the bottom
 # of this file so it overrides the configuration defined above.

commit 88bdb29f0df0e35e2b5c8383cd830212b641e9b0
Author: Lily Foster <lily@lily.flowers>
Date:   Tue Feb 22 13:48:38 2022 -0500

    ImGui - use install root prefix instead of source tree prefix
    
    This still defaults the install prefix to the source tree so builds work
    as they did before.

diff --git a/app/gui/imgui/app.cpp b/app/gui/imgui/app.cpp
index 924b6ca20..3a6b6e261 100644
--- a/app/gui/imgui/app.cpp
+++ b/app/gui/imgui/app.cpp
@@ -91,7 +91,7 @@ void start_sonic_pi()
 {
     sonic.spClient = std::make_shared<SPClient>();
     sonic.spApi = std::make_shared<SonicPiAPI>(sonic.spClient.get(), APIProtocol::UDP, LogOption::File);
-    sonic.spApi->Init(fs::path(APP_ROOT) / "..");
+    sonic.spApi->Init(fs::path(APP_INSTALL_ROOT) / "..");
 }
 
 bool sync_sonic_pi()
diff --git a/app/gui/imgui/main.cpp b/app/gui/imgui/main.cpp
index c4614531e..e82bc36fb 100644
--- a/app/gui/imgui/main.cpp
+++ b/app/gui/imgui/main.cpp
@@ -190,7 +190,7 @@ int main(int, char**)
     // - Remember that in C/C++ if you want to include a backslash \ in a string literal you need to write a double backslash \\ !
     //io.Fonts->AddFontDefault();
     ///io.Fonts->AddFontFromFileTTF("../../misc/fonts/Roboto-Medium.ttf", 16.0f);
-    io.Fonts->AddFontFromFileTTF(APP_ROOT "/gui/imgui/res/Cousine-Regular.ttf", 16.0f * vdpi);
+    io.Fonts->AddFontFromFileTTF(APP_INSTALL_ROOT "/gui/imgui/res/Cousine-Regular.ttf", 16.0f * vdpi);
     //io.Fonts->AddFontFromFileTTF("../../misc/fonts/DroidSans.ttf", 16.0f);
     //io.Fonts->AddFontFromFileTTF("../../misc/fonts/ProggyTiny.ttf", 10.0f);
     //ImFont* font = io.Fonts->AddFontFromFileTTF("c:\\Windows\\Fonts\\ArialUni.ttf", 18.0f, NULL, io.Fonts->GetGlyphRangesJapanese());

commit 33890c88d45a866682636d0afe5648e15f876d60
Author: Lily Foster <lily@lily.flowers>
Date:   Tue Feb 22 13:48:00 2022 -0500

    Build - add support for using system libraries

diff --git a/app/CMakeLists.txt b/app/CMakeLists.txt
index d27907b54..db22c9b9c 100644
--- a/app/CMakeLists.txt
+++ b/app/CMakeLists.txt
@@ -1,5 +1,7 @@
 cmake_minimum_required(VERSION 3.13)
 
+option(USE_SYSTEM_LIBS "Build using system libraries instead of vcpkg libraries" OFF)
+
 message(STATUS " CMakeLists: Sonic Pi")
 
 # Sonic Pi Requires a C++ 17 Compiler to build it
@@ -27,7 +29,9 @@ if (WIN32)
 endif()
 
 # vcpkg toolchain - Must be declared before project
-set(CMAKE_TOOLCHAIN_FILE ${APP_ROOT}/vcpkg/scripts/buildsystems/vcpkg.cmake CACHE STRING "Vcpkg toolchain file")
+if (NOT USE_SYSTEM_LIBS)
+  set(CMAKE_TOOLCHAIN_FILE ${APP_ROOT}/vcpkg/scripts/buildsystems/vcpkg.cmake CACHE STRING "Vcpkg toolchain file")
+endif()
 
 project(SonicPi)
 
diff --git a/app/api/CMakeLists.txt b/app/api/CMakeLists.txt
index 6a2c8704d..bc06d1661 100644
--- a/app/api/CMakeLists.txt
+++ b/app/api/CMakeLists.txt
@@ -47,7 +47,12 @@ find_package(platform_folders CONFIG REQUIRED)
 find_package(reproc CONFIG REQUIRED)
 find_package(reproc++ CONFIG REQUIRED)
 
-find_package(unofficial-kissfft CONFIG REQUIRED)
+if (USE_SYSTEM_LIBS)
+    find_package(PkgConfig REQUIRED)
+    pkg_check_modules(kissfft REQUIRED IMPORTED_TARGET kissfft-float)
+else()
+    find_package(unofficial-kissfft CONFIG REQUIRED)
+endif()
 
 target_include_directories(${PROJECT_NAME}
     PUBLIC
@@ -66,9 +71,20 @@ target_link_libraries(${PROJECT_NAME}
         sago::platform_folders
         reproc
         reproc++
-        unofficial::kissfft::kissfft
 )
 
+if (USE_SYSTEM_LIBS)
+    target_link_libraries(${PROJECT_NAME}
+        PRIVATE
+            PkgConfig::kissfft
+    )
+else()
+    target_link_libraries(${PROJECT_NAME}
+        PRIVATE
+            unofficial::kissfft::kissfft
+    )
+endif()
+
 # Windows
 if ("${CMAKE_SYSTEM_NAME}" STREQUAL "Windows")
 find_package(crossguid CONFIG REQUIRED)
diff --git a/app/gui/imgui/CMakeLists.txt b/app/gui/imgui/CMakeLists.txt
index f5580e7b3..cfe2a006a 100644
--- a/app/gui/imgui/CMakeLists.txt
+++ b/app/gui/imgui/CMakeLists.txt
@@ -16,6 +16,18 @@ find_package(gl3w CONFIG REQUIRED)
 find_package(SDL2 CONFIG REQUIRED)
 find_package(fmt CONFIG REQUIRED)
 
+if (USE_SYSTEM_LIBS)
+    set(CMAKE_THREAD_PREFER_PTHREAD TRUE)
+    set(THREADS_PREFER_PTHREAD_FLAG TRUE)
+
+    if (${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
+	find_package(Threads REQUIRED)
+	set(PLATFORM_LINKLIBS
+	    Threads::Threads
+	    )
+    endif()
+endif()
+
 set(SPIMGUI_APP_SOURCE
     ${APP_ROOT}/main.cpp
     ${APP_ROOT}/app.cpp
@@ -83,13 +95,35 @@ target_link_directories(${APP_NAME}
 	 )
 endif()
 
-target_link_libraries (${APP_NAME} 
+if (APP_INSTALL_ROOT)
+    target_compile_definitions(${APP_NAME} PRIVATE APP_INSTALL_ROOT="${APP_INSTALL_ROOT}")
+else()
+    target_compile_definitions(${APP_NAME} PRIVATE APP_INSTALL_ROOT="${APP_ROOT}")
+endif()
+
+target_link_libraries (${APP_NAME}
     PRIVATE
     SonicPi::API
-    unofficial::gl3w::gl3w
-    SDL2::SDL2main
-    SDL2::SDL2-static
     fmt::fmt
+    )
+
+if (USE_SYSTEM_LIBS)
+    target_link_libraries (${APP_NAME}
+	PRIVATE
+	gl3w
+	SDL2::SDL2
+	)
+else()
+    target_link_libraries (${APP_NAME}
+	PRIVATE
+	unofficial::gl3w::gl3w
+	SDL2::SDL2main
+	SDL2::SDL2-static
+	)
+endif()
+
+target_link_libraries (${APP_NAME} 
+    PRIVATE
     ${PLATFORM_LINKLIBS}
     )
 
